{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.321389e9.js","sourceRoot":"../src","sourcesContent":["// Function to fetch the latest Bitcoin transactions\nasync function getLatestTransactions(): Promise<string[]> {\n  const response = await fetch(\"https://blockchain.info/latestblock\");\n  const latestBlock = await response.json();\n  const transactions = latestBlock.txIndexes;\n  return transactions.map((tx) => `https://blockchain.info/tx/${tx}`);\n}\n\n// Function to fetch the latest Bitcoin blocks\nasync function getLatestBlocks(): Promise<string[]> {\n  const response = await fetch(\"https://blockchain.info/blocks\");\n  const blocks = await response.json();\n  return blocks.map((block) => `https://blockchain.info/block/${block.hash}`);\n}\n\n// Function to fetch the current Bitcoin price\nasync function getBitcoinPrice(): Promise<number> {\n  const response = await fetch(\n    \"https://api.coindesk.com/v1/bpi/currentprice.json\"\n  );\n  const priceData = await response.json();\n  return priceData.bpi.USD.rate_float;\n}\n\n// Function to fetch the current Bitcoin block height\nasync function getBlockHeight(): Promise<number> {\n  const response = await fetch(\"https://blockchain.info/q/getblockcount\");\n  const blockHeight = await response.text();\n  return parseInt(blockHeight);\n}\n\n// Function to fetch the current Bitcoin block time\nasync function getBlockTime(): Promise<number> {\n  const response = await fetch(\"https://blockchain.info/q/interval\");\n  const blockTime = await response.text();\n  return parseInt(blockTime);\n}\n\n// Function to fetch the next Bitcoin halving time\nasync function getHalvingTime(): Promise<number> {\n  const response = await fetch(\"https://blockchain.info/q/halving\");\n  const halvingTime = await response.text();\n  return parseInt(halvingTime);\n}\n\n// Function to format the time as a string with minutes, seconds, and milliseconds\nfunction formatTime(timeInMilliseconds: number): string {\n  const minutes = Math.floor(timeInMilliseconds / 60000);\n  const seconds = Math.floor((timeInMilliseconds % 60000) / 1000);\n  const milliseconds = timeInMilliseconds % 1000;\n  return `${minutes.toString().padStart(2, \"0\")}:${seconds\n    .toString()\n    .padStart(2, \"0\")}.${milliseconds.toString().padStart(3, \"0\")}`;\n}\n// Function to calculate the next Bitcoin halving time based on the current block height\nfunction calculateHalvingTime(blockHeight: number): Date {\n  const blocksUntilHalving = 210000 - (blockHeight % 210000);\n  const secondsUntilHalving = blocksUntilHalving * 10 * 60;\n  const currentTime = new Date();\n  const halvingTime = new Date(currentTime.getTime() + secondsUntilHalving * 1000);\n  return halvingTime;\n}\n\n// Function to display the Bitcoin halving time\nasync function displayHalvingTime() {\n  const response = await fetch(\"https://blockchain.info/latestblock\");\n  const latestBlock = await response.json();\n  const blockHeight = latestBlock.height;\n  const halvingTime = calculateHalvingTime(blockHeight);\n  const halvingTimeElement = document.getElementById(\"halving-time\");\n  halvingTimeElement.textContent = halvingTime.toLocaleString();\n}\n\n// Function to update the Blockclock display with the latest transactions, latest blocks, and Bitcoin price\nfunction updateClock() {\n  const latestTransactionsElement = document.getElementById(\"latest-transactions\");\n  const latestBlocksElement = document.getElementById(\"latest-blocks\");\n  const bitcoinPriceElement = document.getElementById(\"bitcoin-price\");\n  getLatestTransactions().then((transactions) => {\n    latestTransactionsElement.textContent = transactions\n      .map((tx) => `<li><a href=\"${tx}\" target=\"_blank\">${tx}</a></li>`)\n      .join(\"\");\n  });\n  getLatestBlocks().then((blocks) => {\n    latestBlocksElement.textContent = blocks\n      .map((block) => `<li><a href=\"${block}\" target=\"_blank\">${block}</a></li>`)\n      .join(\"\");\n  });\n  getBitcoinPrice().then((price) => {\n    bitcoinPriceElement.innerText = `$${price.toFixed(2)}`;\n  });\n  const blockHeightElement = document.getElementById(\"block-height\");\n  const blockTimeElement = document.getElementById(\"block-time\");\n  getBlockHeight().then((blockHeight) => {\n    blockHeightElement.textContent = blockHeight.toLocaleString();\n  });\n  getBlockTime().then((blockTime) => {\n    blockTimeElement.textContent = formatTime(blockTime);\n  });\n}\n\nupdateClock();\ndisplayHalvingTime();\n// Update the clock every 10 seconds\nsetInterval(updateClock,  60 * 1000);\nsetInterval(displayHalvingTime,  60 * 1000);\n"]}